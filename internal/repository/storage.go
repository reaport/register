package repository

import (
	"github.com/reaport/register/internal/models"
	"github.com/sirupsen/logrus"
	"sync"
)

type Storage struct {
	flights []Flight // —Ä–µ–π—Å—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
	mu      sync.Mutex
}

type Flight struct {
	flights    models.Flight
	passengers []models.Passenger
	mu         sync.Mutex
}

func NewStorage() *Storage {
	return &Storage{
		flights: make([]Flight, 0),
	}
}

// RegisterPassengerFlight - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –Ω–∞ —Ä–µ–π—Å
func (s *Storage) RegisterPassengerFlight(passenger models.Passenger) (models.PassengerResponse, error) {
	s.mu.Lock()
	defer s.mu.Unlock()
	//  –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Å –∏ –º–µ–Ω—è–µ–º –ø–∏—Ç–∞–Ω–∏–µ
	// TODO –ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
	flightId, err := s.getFlightAndSetMeal(passenger.Uuid)
	if err != nil {
		return models.PassengerResponse{}, err
	}
	for i := 0; i < len(s.flights); i++ {
		// –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π —Ä–µ–π—Å
		if s.flights[i].flights.FlightId == flightId {
			for seatIndex, seat := range s.flights[i].flights.SeatsAircraft {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç –ª–∏ –∫–ª–∞—Å—Å –∏ —Å–≤–æ–±–æ–¥–Ω–æ –ª–∏ –º–µ—Å—Ç–æ
				if seat.SeatClass == passenger.SeatClass && !seat.Employ {
					logrus.Info("‚úÖ Storage.RegisterPassengerFlight üë§", " flight: ", flightId, " place: ", seat.SeatNumber, "taken passenger: ", passenger.Uuid)
					s.flights[i].flights.SeatsAircraft[seatIndex].Employ = true
					return models.PassengerResponse{FlightName: s.flights[i].flights.FlightName, DepartureTime: s.flights[i].flights.DepartureTime, StartPlantingTime: s.flights[i].flights.StartPlantingTime, Seat: seat.SeatNumber}, nil
				}
			}
			logrus.Error("‚ùåStorage.RegisterPassengerFlight üë§ unexpected overbooking: ", " flight: ", flightId)
			return models.PassengerResponse{}, models.ErrInternalServer
		}
	}
	logrus.Error("‚ùåStorage.RegisterPassengerFlight üë§ : ", " flight: ", flightId, "  not found")
	return models.PassengerResponse{}, models.ErrInternalServer
}

// RegisterFlights - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–π—Å–∞, –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –∫–∞—Ä—Ç—É —Å–∞–º–æ–ª—ë—Ç–∞
func (s *Storage) RegisterFlights(fl models.Flight, passengers []models.Passenger) error {
	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–π —Ä–µ–π—Å
	s.mu.Lock()
	logrus.Info("‚úÖ Storage.RegisterFlights ‚úàÔ∏è register flight: ", fl.FlightId, " ", fl.FlightName)
	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∫—É
	s.flights = append(s.flights, Flight{
		flights:    fl,
		passengers: passengers,
	})
	s.mu.Unlock()
	return nil
}

func (s *Storage) RemoveFlight(flightId string) error {
	s.mu.Lock()
	defer s.mu.Unlock()
	for i := 0; i < len(s.flights); i++ {
		if s.flights[i].flights.FlightId == flightId {
			logrus.Info("‚úÖ Storage.RemoveFlightÔ∏è ‚úàÔ∏è üóëÔ∏è  flight: ", flightId, " ", s.flights[i].flights.FlightName)
			s.flights = append(s.flights[:i], s.flights[i+1:]...)
			return nil
		}
	}
	logrus.Info("‚ùå Storage.RemoveFlightÔ∏è ‚úàÔ∏è üóëÔ∏è  flight: ", flightId)
	return models.ErrInternalServer
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Å–∞ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞
func (s *Storage) getFlightAndSetMeal(passengerId string) (string, error) {
	// –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–π—Å–∞–º
	for i := 0; i < len(s.flights); i++ {
		// –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º —ç—Ç–æ–≥–æ —Ä–µ–π—Å–∞
		for _, passenger := range s.flights[i].passengers {
			if passenger.Uuid == passengerId {
				// TODO –ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∫–æ–Ω—Ñ–∏–≥–æ–º)
				return s.flights[i].flights.FlightId, nil
			}
		}
	}
	return "", models.ErrTicketNotFound
}
