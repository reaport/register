package repository

import (
	"github.com/reaport/register/internal/apperrors"
	"github.com/reaport/register/internal/models"
	"github.com/sirupsen/logrus"
	"sync"
)

type Storage struct {
	flights []Flight // —Ä–µ–π—Å—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
	mu      sync.Mutex
}

type Flight struct {
	flights       models.Flight
	passengers    []models.Passenger
	spaceAircraft map[string]Seat // —Ä–∞—Å—Å–∞–¥–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ —Å–∞–º–æ–ª—ë—Ç—É (–∫–ª—é—á - –º–µ—Å—Ç–æ)
	mu            sync.Mutex
	//muPassenger   sync.RWMutex
}

type Seat struct {
	SeatClass string
	Employ    bool // true - –º–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–æ, false - –ø—É—Å—Ç–æ
}

func NewStorage() *Storage {
	return &Storage{
		flights: make([]Flight, 0),
	}
}

// RegisterPassengerFlight - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –Ω–∞ —Ä–µ–π—Å
func (s *Storage) RegisterPassengerFlight(passenger models.Passenger, flightId string, seatNumber string) error {
	s.mu.Lock()
	defer s.mu.Unlock()
	for i := 0; i < len(s.flights); i++ {
		// –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π —Ä–µ–π—Å
		if s.flights[i].flights.FlightId == flightId {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Å—Ç–æ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
			if seat, exists := s.flights[i].spaceAircraft[seatNumber]; exists && seat.Employ == false {
				// –ú–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è–ª–∏
				if seat.Employ {
					return apperrors.ErrSeatTaken
				}
				logrus.Info("‚úÖ Storage.RegisterPassengerFlight üë§", " flight: ", flightId, " place: ", seatNumber, "taken passenger: ", passenger.Uuid)
				// –ó–∞–Ω–∏–º–∞–µ–º –º–µ—Å—Ç–æ
				s.flights[i].mu.Lock()
				seat.Employ = true
				s.flights[i].mu.Unlock()
				return nil
			} else {
				logrus.Error("‚ùåStorage.RegisterPassengerFlight üë§ error: ", apperrors.ErrSeatNotFound, " flight: ", flightId, " place: ", seatNumber, "already taken another passenger")
				return apperrors.ErrSeatNotFound
			}
		}
	}
	logrus.Error("‚ùåStorage.RegisterPassengerFlight üë§ error: ", apperrors.ErrFlightNotFound, " flight: ", flightId)
	return apperrors.ErrFlightNotFound
}

// RegisterFlights - —Å–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–π—Å–∞, –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –∫–∞—Ä—Ç—É —Å–∞–º–æ–ª—ë—Ç–∞
func (s *Storage) RegisterFlights(fl models.Flight, spaceAircraft map[string]Seat, passengers []models.Passenger) error {
	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–π —Ä–µ–π—Å
	s.mu.Lock()
	logrus.Info("‚úÖ Storage.RegisterFlights ‚úàÔ∏è flight: ", fl.FlightId, " ", fl.FlightName)
	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∫—É
	s.flights = append(s.flights, Flight{
		flights:       fl,
		spaceAircraft: spaceAircraft,
		passengers:    passengers,
	})
	s.mu.Unlock()
	return nil
}

func (s *Storage) RemoveFlight(flightId string) error {
	s.mu.Lock()
	defer s.mu.Unlock()
	for i := 0; i < len(s.flights); i++ {
		if s.flights[i].flights.FlightId == flightId {
			logrus.Info("‚úÖ Storage.RemoveFlightÔ∏è ‚úàÔ∏è üóëÔ∏è  flight: ", flightId, " ", s.flights[i].flights.FlightName)
			s.flights = append(s.flights[:i], s.flights[i+1:]...)
			return nil
		}
	}
	logrus.Info("‚ùå Storage.RemoveFlightÔ∏è ‚úàÔ∏è üóëÔ∏è  flight: ", flightId)
	return apperrors.ErrFlightNotFound
}

func (s *Storage) GetSpaceAircraft(flightId string) (map[string]Seat, error) {
	for i := 0; i < len(s.flights); i++ {
		if s.flights[i].flights.FlightId == flightId {
			return s.flights[i].spaceAircraft, nil
		}
	}
	return nil, apperrors.ErrFlightNotFound
}

func (s *Storage) ExistFlight(flightId string) bool {
	for i := 0; i < len(s.flights); i++ {
		if s.flights[i].flights.FlightId == flightId {
			return true
		}
	}
	return false
}

func (s *Storage) GetFlightForPassenger(passengerId string) (string, error) {
	// –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–π—Å–∞–º
	for i := 0; i < len(s.flights); i++ {
		// –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º —ç—Ç–æ–≥–æ —Ä–µ–π—Å–∞
		for _, passenger := range s.flights[i].passengers {
			if passenger.Uuid == passengerId {
				return s.flights[i].flights.FlightId, nil
			}
		}
	}
	return "", apperrors.ErrTicketNotFound
}

func (s *Storage) GetSeatForPassenger(flightId string, seatClass string) (string, error) {
	for i := 0; i < len(s.flights); i++ {
		if s.flights[i].flights.FlightId == flightId {
			for seatNumber, seatOption := range s.flights[i].spaceAircraft {
				s.flights[i].mu.Lock()
				// –ï—Å–ª–∏ –º–µ—Å—Ç–æ —Å–≤–æ–±–æ–¥–Ω–æ –∏ —Å–æ–æ—Ç–≤–µ—Ç–≤—É–µ—Ç –∫–ª–∞—Å—Å—É => –∑–∞–Ω–∏–º–∞–µ–º
				if !seatOption.Employ && seatOption.SeatClass == seatClass {
					s.flights[i].spaceAircraft[seatNumber] = Seat{
						SeatClass: seatClass,
						Employ:    true,
					}
					s.flights[i].mu.Unlock()
					return seatNumber, nil
				}
				s.flights[i].mu.Lock()
			}
		}
	}
	return "", apperrors.ErrInternalServer
}

//// –ò–¥—ë–º –ø–æ –Ω–æ–º–µ—Ä—É —Ä—è–¥–∞
//for col := 0; col < len(s.flights[i].spaceAircraft); col++ {
//	// –ò–¥—ë–º –ø–æ —Å–∞–º–æ–º—É —Ä—è–¥—É (–ø–æ —Å—Ç—Ä–æ—á–∫–µ)
//	for row := 0; row < len(s.flights[i].spaceAircraft[i]); row++ {
//
//	}
//}
