package repository

import (
	"fmt"
	"github.com/reaport/register/internal/config"
	"github.com/reaport/register/internal/errors"
	"github.com/reaport/register/internal/models"
	"github.com/sirupsen/logrus"
	"sync"
	"time"
)

type Storage struct {
	flights []Flight // —Ä–µ–π—Å—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
	cfg     config.Config
	mu      sync.Mutex
}

type Flight struct {
	flights    models.Flight
	passengers []models.Passenger
	mu         sync.Mutex
}

func NewStorage() *Storage {
	logrus.Info("storage instance initialized")
	return &Storage{
		flights: make([]Flight, 0),
	}
}

func (s *Storage) GetData() map[string][]string {
	logrus.Info("GetData ", s.flights)
	logrus.Info("‚úÖ‚úÖ‚úÖ GetData ‚úÖ‚úÖ‚úÖ ")
	data := make(map[string][]string)
	for _, f := range s.flights {
		fmt.Println("‚úàÔ∏è flightId: ", f.flights.FlightId, "‚úàÔ∏è flightName: ", f.flights.FlightName, " seat:", f.flights.SeatsAircraft)
		fmt.Println("End Register Time ", f.flights.EndRegisterTime)
		fmt.Println("üë§ passengers", f.passengers)
		for _, pass := range f.passengers {
			data[f.flights.FlightId] = append(data[f.flights.FlightId], pass.Uuid)
		}
	}
	return data
}

// RegisterPassengerFlight - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –Ω–∞ —Ä–µ–π—Å
func (s *Storage) RegisterPassengerFlight(passenger models.Passenger) (models.PassengerResponse, error) {
	logrus.Info("Storage RegisterPassengerFlight")
	//  –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Å –∏ –º–µ–Ω—è–µ–º –ø–∏—Ç–∞–Ω–∏–µ
	flightId, humanId, err := s.getFlightAndIndexHumanAndSetMeal(passenger)
	if err != nil {
		return models.PassengerResponse{}, err
	}
	for i := 0; i < len(s.flights); i++ {
		// –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π —Ä–µ–π—Å
		if s.flights[i].flights.FlightId == flightId {
			for seatIndex, seat := range s.flights[i].flights.SeatsAircraft {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç –ª–∏ –∫–ª–∞—Å—Å –∏ —Å–≤–æ–±–æ–¥–Ω–æ –ª–∏ –º–µ—Å—Ç–æ
				if seat.SeatClass == s.flights[i].passengers[humanId].SeatClass && !seat.Employ {
					logrus.Info("‚úÖ Storage.RegisterPassengerFlight üë§", " flight: ", flightId, " place: ", seat.SeatNumber, "taken passenger: ", passenger.Uuid)
					s.flights[i].flights.SeatsAircraft[seatIndex].Employ = true
					s.flights[i].passengers[humanId].Have = true
					return models.PassengerResponse{FlightName: s.flights[i].flights.FlightName, DepartureTime: s.flights[i].flights.DepartureTime, StartPlantingTime: s.flights[i].flights.StartPlantingTime, Seat: seat.SeatNumber}, nil
				}
			}
			logrus.Error("‚ùåStorage.RegisterPassengerFlight üë§ unexpected overbooking: ", " flight: ", flightId, " –º–µ—Å—Ç–∞ ", s.flights[i].flights.SeatsAircraft, "\n passanger", s.flights[i].passengers)

			return models.PassengerResponse{}, errors.ErrInternalServer
		}
	}
	logrus.Error("‚ùåStorage.RegisterPassengerFlight üë§ : ", " flight: ", flightId, "  not found")
	return models.PassengerResponse{}, errors.ErrTicketNotFound
}

// RegisterFlights - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–π—Å–∞, –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –∫–∞—Ä—Ç—É —Å–∞–º–æ–ª—ë—Ç–∞
func (s *Storage) RegisterFlights(fl models.Flight, passengers []models.Passenger) (time.Time, error) {
	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–π —Ä–µ–π—Å

	logrus.Info("‚úÖ Storage.RegisterFlights ‚úàÔ∏è register flight: ", fl.FlightId, " ", fl.FlightName)
	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∫—É
	s.flights = append(s.flights, Flight{
		flights:    fl,
		passengers: passengers,
	})
	return fl.EndRegisterTime, nil
}

func (s *Storage) RemoveFlight(flightId string) error {
	s.mu.Lock()
	defer s.mu.Unlock()
	for i := 0; i < len(s.flights); i++ {
		if s.flights[i].flights.FlightId == flightId {
			logrus.Info("‚úÖ Storage.RemoveFlightÔ∏è ‚úàÔ∏è üóë  flight: ", flightId, " ", s.flights[i].flights.FlightName)
			s.flights = append(s.flights[:i], s.flights[i+1:]...)
			return nil
		}
	}
	logrus.Info("‚ùå Storage.RemoveFlightÔ∏è ‚úàÔ∏è üóë  flight: ", flightId)
	return errors.ErrInternalServer
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Å–∞ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞
func (s *Storage) getFlightAndIndexHumanAndSetMeal(human models.Passenger) (string, int, error) {
	// –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–π—Å–∞–º
	fmt.Println(human)
	for i := 0; i < len(s.flights); i++ {
		// –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º —ç—Ç–æ–≥–æ —Ä–µ–π—Å–∞
		for passengerIndex, passenger := range s.flights[i].passengers {
			if passenger.Uuid == human.Uuid {
				// –ú–µ–Ω—è–µ–º –ø–∏—Ç–∞–Ω–∏–µ –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
				if human.MealType != "" {
					s.flights[i].passengers[passengerIndex].MealType = human.MealType
				}
				if human.BaggageWeight > 0.0 {
					s.flights[i].passengers[passengerIndex].BaggageWeight = human.BaggageWeight
				}
				return s.flights[i].flights.FlightId, passengerIndex, nil
			}
		}
	}
	return "", 0, errors.ErrTicketNotFound
}

func (s *Storage) GetMealsAndBaggage(flightId string) (models.RegistrationFinishRequest, error) {
	result := models.RegistrationFinishRequest{Meal: make(map[string]int)}
	for i := 0; i < len(s.flights); i++ {
		if s.flights[i].flights.FlightId == flightId {
			for _, human := range s.flights[i].passengers {
				// –ï—Å–ª–∏ –ø–∞—Å—Å–∞–∂–∏—Ä –∑–∞—Ä–µ–≥–∞–ª—Å—è
				if human.Have {
					result.BaggageWeight += human.BaggageWeight
					result.Meal[human.MealType] += 1
				}
			}
			return result, nil
		}
	}
	return models.RegistrationFinishRequest{}, errors.ErrInternalServer
}
